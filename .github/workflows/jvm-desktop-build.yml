name: Compose Desktop(JVM) CI

on:
  pull_request:
    types: [ opened, synchronize, reopened ]
    branches: [ 2025/compose-multiplatform ]
    paths-ignore:
      - 'iosApp/**'
      - 'kotlin-js-store/**'
  push:
    branches: [ 2025/compose-multiplatform ]
    paths-ignore:
      - 'iosApp/**'
      - 'kotlin-js-store/**'

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  windows:
    name: 🪟 Windows Build
    runs-on: windows-latest
    outputs:
      artifact_url: ${{ steps.upload.outputs.artifact-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: ./.github/actions/setup-java
      - name: Package MSI
        run: ./gradlew :composeApp:packageMsi --stacktrace
      - name: Upload Windows Installer
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: desktop-msi
          path: composeApp/build/compose/binaries/main/msi/*.msi

  macos:
    name: 🍎 macOS Build
    runs-on: macos-latest
    outputs:
      artifact_url: ${{ steps.upload.outputs.artifact-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: ./.github/actions/setup-java
      - name: Package DMG
        run: ./gradlew :composeApp:packageDmg --stacktrace
      - name: Upload macOS Installer
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: desktop-dmg
          path: composeApp/build/compose/binaries/main/dmg/*.dmg

  linux:
    name: 🐧 Linux Build
    runs-on: ubuntu-latest
    outputs:
      artifact_url: ${{ steps.upload.outputs.artifact-url }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Setup Java
        uses: ./.github/actions/setup-java
      - name: Install Debian packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y fakeroot dpkg-dev openjdk-17-jdk
          sudo apt-get install -y jpackage || true
      - name: Check jpackage version
        run: |
          which jpackage || (find /usr/lib/jvm/ -name jpackage)
          java --version
      - name: Package DEB
        run: ./gradlew :composeApp:packageDeb --stacktrace
      - name: Debug jpackage logs
        if: ${{ failure() }}
        run: |
          find composeApp/build/compose/logs/packageDeb/ -type f -exec echo "=== {} ===" \; -exec cat {} \;
      - name: Upload Linux Installer
        id: upload
        uses: actions/upload-artifact@v4
        with:
          name: desktop-deb
          path: composeApp/build/compose/binaries/main/deb/*.deb

  comment:
    name: 💬 Comment Build Status
    needs: [ windows, macos, linux ]
    runs-on: ubuntu-latest
    if: ${{ always() && github.event_name == 'pull_request' }}
    steps:
      - name: Post summary comment via GitHub API
        env:
          COMMENT_JOB_TOKEN: ${{ secrets.COMMENT_JOB_TOKEN }}
          PULL_REQUEST_NUMBER: ${{ github.event.pull_request.number }}
          OWNER: ${{ github.repository_owner }}
          REPO: ${{ github.event.repository.name }}
          WINDOWS_RESULT: ${{ needs.windows.result }}
          WINDOWS_ARTIFACT: ${{ needs.windows.outputs.artifact_url }}
          MACOS_RESULT: ${{ needs.macos.result }}
          MACOS_ARTIFACT: ${{ needs.macos.outputs.artifact_url }}
          LINUX_RESULT: ${{ needs.linux.result }}
          LINUX_ARTIFACT: ${{ needs.linux.outputs.artifact_url }}
        run: |
          if [ "$WINDOWS_RESULT" = "success" ]; then
            WINDOWS_LINE="- 🪟 Windows: $WINDOWS_ARTIFACT"
          else
            WINDOWS_LINE="- 🪟 Windows: ❌ 빌드가 실패하였습니다"
          fi

          if [ "$MACOS_RESULT" = "success" ]; then
            MACOS_LINE="- 🍎 macOS: $MACOS_ARTIFACT"
          else
            MACOS_LINE="- 🍎 macOS: ❌ 빌드가 실패하였습니다"
          fi

          if [ "$LINUX_RESULT" = "success" ]; then
            LINUX_LINE="- 🐧 Linux: $LINUX_ARTIFACT"
          else
            LINUX_LINE="- 🐧 Linux: ❌ 빌드가 실패하였습니다"
          fi

          COMMENT_BODY=$(cat <<EOF
          🚀 **빌드 결과 요약**
          $WINDOWS_LINE
          $MACOS_LINE
          $LINUX_LINE
          EOF
          )
  
          curl -s -X POST \
          -H "Authorization: Bearer $COMMENT_JOB_TOKEN" \
          -H "Accept: application/vnd.github+json" \
          https://api.github.com/repos/$OWNER/$REPO/pulls/$PULL_REQUEST_NUMBER/reviews \
          -d "$(jq -n \
                --arg body "$COMMENT_BODY" \
                --arg event "COMMENT" \
                '{body: $body, event: $event}')"